# Advanced Security Detection Searches

[Enhanced Brute Force Detection]
search = index=* sourcetype=*auth* (failed OR Failed OR FAILED) | eval src_ip=coalesce(src_ip, client_ip, "unknown") | eval user=coalesce(failed_user, invalid_user, user, "unknown") | bucket _time span=1m | stats count dc(user) as unique_users by _time src_ip | where count > 5 | eval risk_level=case(count>20, "CRITICAL", count>10, "HIGH", count>5, "MEDIUM") | sort -count | head 50
dispatch.earliest_time = -15m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.track = 1
alert.severity = 3
description = Enhanced brute force detection with risk scoring

[Lateral Movement Detection]
search = index=* sourcetype=*auth* (success* OR accept* OR Success* OR Accept*) | eval user=coalesce(user, session_user, "unknown") | eval host=coalesce(auth_host, host, "unknown") | stats dc(host) as unique_hosts values(host) as hosts by user | where unique_hosts > 2 | sort -unique_hosts
dispatch.earliest_time = -1h
dispatch.latest_time = now
cron_schedule = 0 * * * *
alert.track = 1
alert.severity = 2
description = Detects users accessing multiple hosts (potential lateral movement)

[Privilege Escalation Detection]
search = index=* (sudo OR su OR admin* OR root OR privilege*) | eval user=coalesce(sudo_user, user, "unknown") | stats count values(sudo_command) as commands by user | where count > 10 | sort -count
dispatch.earliest_time = -1h
dispatch.latest_time = now
cron_schedule = 0 * * * *
alert.track = 1
alert.severity = 2
description = Detects excessive privilege escalation attempts

[Failed Login Geographic Analysis]
search = index=* sourcetype=*auth* (failed OR Failed) | eval src_ip=coalesce(src_ip, client_ip) | iplocation src_ip | stats count by Country City src_ip | where count > 10 | sort -count
dispatch.earliest_time = -4h
dispatch.latest_time = now
cron_schedule = 0 */4 * * *
alert.track = 1
alert.severity = 2
description = Geographic analysis of failed login attempts

[After Hours Access Detection]
search = index=* sourcetype=*auth* (success* OR Success* OR accept*) | eval hour=strftime(_time, "%H") | eval user=coalesce(user, session_user) | where hour < 6 OR hour > 22 | stats count by user hour | where count > 3 | sort -count
dispatch.earliest_time = -24h
dispatch.latest_time = now
cron_schedule = 0 6 * * *
alert.track = 1
alert.severity = 2
description = Detects after-hours access patterns
